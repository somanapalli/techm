
10 days - core java

    any programmers achievement 
	
	 -to develop the software/application 
	 
	 
software/application:

  collection of programs 
  
  every programmer must follow syntaxes 
  
  
  if programmer not follows syntaxes 
  what will happen?
  
     java compiler 
	 
it is the system defined java program 

purpose: to check the syntaxes of the program 

	 
why should we learn core java?

 what type of applications we have?


   -desktop / standalone application 

   -distributed application 

   
1.using core java knowledge, we can develop 
  desktop applications

2.we can learn advaned java.

3.we can get a chance to learn some highend tools

  like 
     hadoop 
	 salesforce
	 pega
	 tableu.. 
	 
	 






  
	 
	 
	 
	 
	 
	 
	 
	 
 command to compile the java program 

   javac <filename>.java

   javac Welcome.java

path:

path is the location, where all the java tools 
are available. 

C:\Program Files\Java\jdk-19\bin


   how to set the path:
   
   salesforce
  
  
  command to execute the java program
  
   java <classname>
   
   java Welcome
   
   
 what is java?


  java is object oriented programming langugage
  
  
    because it follows oops principles.
	
	 oops principels are given by -omg
	 
	 1.inheritance
	 2.polymorphism
	 3.abstraction 
	 4.encapsulation 
	 
	  
in java, to achieve the above 4 principles we do 
have two concepts are there.

  
 1.class
 2.object


class:
```````
  class is a collection of 
  
  -variables
  -methods
  
  





 



class Techm
{
   stname;
   stid;
   
   
   learn()
   {
   }
   observe()
   {
   }
   teaching()
   {
   }
   listening()
   {
   }
  
}


 every java program should start with by defining 
 the class .
 
 note:
 without defining the classs, there is no java 
 program.
 
 
 variable:
 ````````````
 variable is a name which we are giving to the 
 memory lcoation, 
 
 because of variables, we are able to improve 
 the readability of the code.
 
 purpose: to store the data.
 
 syntax:
    
	 <datatypename> <variablename> = <value>;
	 
	 
	 int stid = 100;
	 
	 
	 
 in java, we have 4 cateogires
 
 
 integer
 
    -byte
	-short
	-int
	-long
	
 
 character
 
    char
 
 
 float
 
    -float
	-double
	
 
 boolean 
 
    -boolean 
	
	
 
 integer category datatype 
  purpose: to store the numeric values
  
  
 every datatype has maintaining two things
 
 
 1.memory size
 2.range 
 
 byte - 1byte- 8bits
 short -2 bytes - 16 bits
 int - 4bytes
 long - 8bytes
 
formula to calculate the range of the datatype.

byte

  -2^n-1 to (2^n-1) -1
  
  -2^7 to 2^7 - 1
  -128 to 127
  
  byte b = 130;
  
 
 
 
 https://github.com/somanapalli/dhaapps
  
method:
```````
method is the place , where we are writing the logic to perform some operation based on the 
requirement.

syntax:

   <returntype> <methodname>()
   {
   
   }
  
  method definition = method heading + method body
  
  
  define the method display, which prints 
  welcome message.
  
    void display()
	{
	
	  System.out.println("welcome to techm");
	}
  
  void =returntype 
  meaning: not returning any value.
  
  
 define one method , which gives name of the student?

    String s = "Ram";
	
  
  String getStudentName()
  {
     return "ram";
  }
  
  note:
  return type and return value must be compatible
  or same with each other.
  otherwise we will get compile time error.
  
  
define one method which gives marks of the student?

  float getStudentMarks()
  {
  
    return 98.5f;
  }
  
define one method which gives salary of the employee?

       double getEmployeeSalary()
	   {
	   return 22000.78;
	   }


define one method which takes two integer parameters and returns their sum?

    
	 int getSum(int a, int b)
	 {
         return a+b;
	 }

define one method which takes firstname, lastname 
as paramters and returns their fullname?

            String getFullName(String first_Nname, String last_name)
			{
			return firstName+lastName;
			}

rules to declare the variables:
```````````````````````````````
rules to declare the variable name:
``````````````````````````````````````
1.variable name should always starts with alphabet 
  it should not start with numeric 

2.no special characters are allowed except $ and _(underscore)  

3.we are not allowed to use varaible names as java reserved words.

  
4.variable names are case sensitive.

5.blank spaces are not allowed while we are declaring the variables.

  String student_name = "Ram"


class is a collection of variables and methods 
into a single unit. that single unit is known 
as class. 

note:
inner method defintion is not possible in java
inner method invocation is possible in java.








object:
instance of class is known as object
instance:

allocating sufficient amout of memeory space 
for the instance properties which we are declaring inside
the class.

syntax:

 <classname> <objectname> = new <classname>();
 ex:
 
  Student obj = new Student();
  
  Student ->name of the class
  obj  -> name of the object
  = -> assignment operator
  new ->dynamic memory allocation operator
  Student() -> constructor 
  
  
  
example:
`````````

public class Student {

	//variables 
	int stid=100;
	String stname="Ram";
	//method definition 
	
	 void getStudentInfo()
	{
		System.out.println("student id is:" + stid);
		System.out.println("student name is : " + stname);
	
	}
	 
	 public static void main(String[] args) {
		
		 
		 Student obj = new Student();
		 
		 System.out.println(obj.stid);
		 System.out.println(obj.stname);
		 
		 //call the method
		 
		 obj.getStudentInfo();
		 
	}
	
}


instance vs static:
```````````````````
  instance area
  
  static area
  
  
  void m1()
  {
  //instance area
  }
  
  
  static void m2()
  {
  //static area
  }
  
  
  
  the area which belongs to non static /instance 
  method is known as instance area.
  
  the area which belongs to static method is known 
  as static area.
  
  
example on instance vs static?
``````````````````````````````

public class Student {

	//instance variables 
	int stid=100;
	String stname="Ram";
	static String collegeName="Aditya";
	//method definition 
	
	//instance method
	 void getStudentInfo()
	{
		 //instance area
		System.out.println("student id is:" + stid);
		System.out.println("student name is : " + stname);
		System.out.println("college name is: " + collegeName);
	
	}
	 
	 public static void main(String[] args) {
		
		 //static area
		 Student obj = new Student();
		 
		 System.out.println(obj.stid);
		 System.out.println(obj.stname);
		 System.out.println(Student.collegeName);
		 
		 //call the method
		 
		 obj.getStudentInfo();
		 
	}	
}



constructor:
````````````
constructor is a special member method which is used to initialize the object.


 int a;
 a=100;
 
 int a =100;
 
 initialization = declaration + assigning the value.
 
 constructor is used to initialize the object.
 
 
 rules:
 
 constructor must be similar to class name.
 
 constructor should not return anything even void 
 also.
 
 constructor should not be static
 constructor should not be inherited.
 
example without constructor:

public class Student {

	//variables declaration 
	int stid;
	String stname;
	
	public void setValues()
	{
		//assigning the values
		stid=100;
		stname="Naveen";
		
	}
	
	public void display()
	{
		System.out.println("student id is : " + stid);
		System.out.println("student name is : " +stname);
	}
	 
	
    public static void main(String[] args) {
		
    	
    	Student obj = new Student();
    	
    	obj.setValues();
    	obj.display();
    	
	}
	 
	
}


example with constructor:
`````````````````````````

public class Student {

	//variables declaration 
	int stid;
	String stname;
	
    //define the constructor
	Student()
	{
		stid=100;
		stname="priya";
	}
	
	public void display()
	{
		System.out.println("student id is : " + stid);
		System.out.println("student name is : " +stname);
	}
	 
	
    public static void main(String[] args) {
		
    	
    	Student obj = new Student();
    	
    	
    	obj.display();
    	
	}
	 
	
}

types of constructors:
``````````````````````
in java, we have two types of constructors are there
  
    1. default constructor
	
	      -system defined /compiler generated 
		   default construcotr 
		     -purpose: to initialize default values
		   
		  -user defined default constructor
		  
		     -purpose: to initialize our own values.
			 

example on user defined default constructor and system defined default constructor


public class Student {

	// variables declaration
	int stid;
	String stname;

	public void display() {
		System.out.println("student id is : " + stid);
		System.out.println("student name is : " + stname);
	}

	/*
	 * system define default constructor
	 * public Student() { stid=0; stname=null; }
	 */
	
	//user defined default constructor
	public Student()
	{
		stid=100;
		stname="Rama";
	}

	public static void main(String[] args) {

		Student obj = new Student();

		obj.display();

	}

}


2.parameterized constructor
	

 it is a constructor which takes parameters 
 
 
example on parameterized constructor:
``````````````````````````````````````

public class Student {

	// variables declaration
	int stid;
	String stname;
	
	//parameterized constructor
	public Student(int x, String y)
	{
		stid=x;
		stname=y;
	}

	public void display() {
		System.out.println("student id is : " + stid);
		System.out.println("student name is : " + stname);
	}

	public static void main(String[] args) {

		//create the object using parameterized constructor
		
		Student obj = new Student(100,"sravan");
		obj.display();

	}

}








  
  
example on both user defined and parameterized 
constructor:


public class Student {

	// variables declaration
	int stid;
	String stname;
	
	//parameterized constructor
	public Student(int x, String y)
	{
		stid=x;
		stname=y;
	}
	
	//user defined default constructor
	public Student()
	{
		stid=100;
		stname="ram";
	}

	public void display() {
		System.out.println("student id is : " + stid);
		System.out.println("student name is : " + stname);
	}

	public static void main(String[] args) {

		//create the object using parameterized constructor
		
		Student obj = new Student(100,"sravan");
		obj.display();

		//create the object using user defined default constructor
		Student obj1 = new Student();
		obj1.display();
		
	}

}

this keyword:
```````````````
it is a java reserved keyword
'this' is pointing current class object.

 advantages:
 ```````````
 1.to differntiate class level variables and 
 method level parametes when both are same.
 
example:
`````````

public class Demo {

	//class level variables
	int x,y;
	
	public void setValues(int x, int y)
	{
		//assigning local values to class level variables
		this.x=x;
		this.y=y;
	}
	
	
	public void display()
	{
		System.out.println(x + " " + y);
	}
	public static void main(String[] args) {

		
		Demo obj = new Demo();
		obj.setValues(100,200);
		obj.display();
		
	}

}



2.this() - call current class default constructor
  this(..) - call current class parameterized constructor 


whenever we have multiple construcotrs, to execute 
these multiple constructors we no need to create 
multiple objects 

just by creating single object, by using this syntax like this() , this(..) we are allowed to execute multiple constructors using single object .


constructor call must be the first statement 
inside a constructor 



example:
```````

public class Student {

	//parameterized constructor
	public Student(int x, String y)
	{
		
	System.out.println("iam parameterized constructor");
	}
	
	//user defined default constructor
	public Student()
	{
		//calling current class parameterized constructor
		this(100,"Ram");
	System.out.println("iam default constructor");
	
	}

	

	public static void main(String[] args) {

		//create the object using parameterized constructor
		
		Student obj = new Student();
	
	}

}

  
control statements/conditional statements
``````````````````````````````````````````
java compiler executes the code from top to bottom.


The statements in the code are executed according to the order
in which they appear.



However, java provides statements that can be used to control the 
flow of the java code. such statements are called control statements


java provides three types of control statements 


1.Decision making statements
2.loop statements
3.jump statements


1.Decision making statements:
`````````````````````````````

as the name suggests, decision making statements decide which statement
to execute and when.


Decision making statements evoluate boolean expression and 
control the progrma flow depending upon the result of the condition 
provided.

There are two types of decision making statemetns in java, i.e 
   -if 
   -switch
   
   
if statement:
``````````````
this staement is used to evoluate a boolean condition.

the condition of the if statement gives a boolean value either true 
or false.

in java, there are four types of if statements 

 1.simple if statement
 2.if-else statement
 3.if-else-if ladder
 4.nested if statement 
 
 

1.simple if statement:
``````````````````````
syntax:

 if(condition)
 {
   //statemetns
 }
 
example:
````````

public class Student {

	
	public static void main(String[] args) {
		
		int x=10,y=20;
		
		if(x+y>20) {
			System.out.println("x+y is greater than 20");
		}
		
	}
}

2.if-else statement:
````````````````````
a block is a concept of in between { and }

 if
 {
 
 }

if else staement is an extension of if statement, which uses 
another block of code. i.e catch block.

The else block is executed if the condition of the if block is 
evlouated as false.


syntax:
  
     if(condition){
	   //statement1;//executes when condition is true
	   }
	 else{
	   statement2 ;//executes when condition is false.
	 }

 
example:
`````````

public class Student {

	
	public static void main(String[] args) {
		
		int x=10,y=20;
		
		
		
		if(x+y<20) {
			System.out.println("x+y is less than 20");
		}
		else
		{
			System.out.println("x+y is greater than 20");
		}
	}
}

if-else-if ladder:
`````````````````````

it contains 

 1 if block
 
 multiple else if blocks 
 
 1 else block 
 
 syntax:
 
  if(condition1)
  {
    statement1;//executes when condition 1 is true
  }
  else if(condition2)
  {
    statement2;//executes when condition2 is true
  }
  else if(condition3)
  {
    statement3;//executes when conditio3 is true
  }
  ...
  else
  {
    statement4;//executes when all the condistions are false.
  }
  
example:
`````````

public class Student {

	
	public static void main(String[] args) {
		
		String city="Agra";
		
		if(city=="Chennaih") {
			System.out.println("city is chenniah");
		}
		else if(city=="Hyderabad")
		{
			System.out.println("city is Hyderabad");
		}
		else if(city=="pune")
		{
			System.out.println("city is pune");
		}
		else
		{
			System.out.println(city);
		}
			
	}
}


nested if statement:
```````````````````
in nested if statement, the if staetment can contain a if 


syntax:


  if(condition1)
  {
    staetment1;//executes when condition1 is true
	
	 if(condition2)
	 {
	    statement2;//executes when condition2 is true
	 }
	 else
	 {
	    statement3;//executes when condition2 is false.
		
	 }
  }
  
  

example:
`````````

public class Student {

	
	public static void main(String[] args) {
		
		int a=10,b=20;
		if(a==10)
		{
			if(b!=20)
			{
				System.out.println("dhaaps");
			}
			else
			{
				System.out.println("ramakrishna");
			}
			
		}
	}
}




switch statement:
````````````````

switch statement executes one statement from multiple conditions. 
it is like if-else-if ladder statement.


1.there can be one or n number of case values for a switch expression.

2.the case value must be of switch expression type only.
  the case value must be literal or constant.it doesn't allow 
  variables.
  
3.the case value must be unique, in case of duplicate value it will give you compile time error.


4.java switch expression type must be of byte,short,int,long(with its 
wrapper type),enums and string.

5.each case statement can have a break statement which is optional.

syntax:
```````
 switch(expression)
 {
 
   case value1:
   //code to be executed
   break;//optional
   
   case value2:
   //code to be executed
   break;//optional 
   
   ....
   
   default:
   //code to be executed if all case values are not matched
   
 
 }


}


 
example:
````````

public class Student {

	
	public static void main(String[] args) {
		
		int number=40;
		
		switch(number)
		{
		
		//case statements
		
		case 10:System.out.println("10");
		break;
		case 20:System.out.println("20");
		break;
		case 30:System.out.println("30");
		break;
		default:System.out.println("not in 10,20 or 30");
		}
	}
}


loop statements:
`````````````````
Loops in Java is a feature used to execute a particular part of the program repeatedly if a given condition evaluates to be true.


   -for loop
   -while loop 
   -do while loop
   
for loop:
`````````
purpose:

this for loop is used to iterate a part of the program several/multiple times.

when should you use for loop?

if the number of iteration is fixed, it is recommended to use
for loop.

 -simple for loop
 -nested for loop
 -for each or enhanced for loop
 -labelled for loop

 simple for loop:
 ````````````````
 we can initilize the variable,
 check the condition ,
 increment/decrement the value 
 
 it consitsts of four parts
 
 1.initialization -it is an optional condition 
 
 2.condition 
 
 3.increment/decrement
 
 4.statement
 
syntax:

 for(initialization;condition;increment/decrement)
 {
  //statement 
 }
 
example:
```````
//program for displaying first 10 numbers using for loop
public class Test1 {

   public static void main(String[] args) 
	{
      int i=1;
       for(i=1;i<=10;i++)
       {
    	   System.out.println(i);
       }
	    
	}
}

//program to displaying first 10 numbers in reverse order?

example:
`````````
//program for displaying first 10 numbers using for loop
public class Test1 {

   public static void main(String[] args) 
	{
      int i=10;
       for(;i>=1;i--)
       {
    	   System.out.println(i);
       }
	    
	}
}


display even numbers from 1 to 10 using for loop and if statement?

2

4

6

8

10

example:
``````````
//program for displaying first 10 numbers using for loop
public class Test1 {

   public static void main(String[] args) 
	{
		
		  for(int i=1;i<=10;i++) { 
			  if(i%2==0)
			  {
				 System.out.println(i); 
			  }
		  
		  }
		 
	   // % operator is giving you reminder
	   
	   
	}
}

assignment:
```````````
display odd numbers from 1 to 10 using for loop and if statement?


example:
````````
//program for displaying first 10 numbers using for loop
public class Test1 {

   public static void main(String[] args) 
	{
		
		  for(int i=1;i<=10;i++) { 
			  if(i%2!=0)
			  {
				 System.out.println(i); 
			  }
		  
		  }
		 
	   // % operator is giving you reminder
	   
	   
	}
}


nested for loop:
````````````````
defining for loop inside another for loop. 


if we have a for loop inside another for loop, it is known as 
nested for loop.

The inner for loop executes completely whenever outer for loop 
executes.

once control comes from outerfor loop to inner for loop, it executes inner for loop until the condition became false, once condition false 
again it goes back to outerfor loop then comes to inner loop like this 
flow is going on.



example:
````````
//program on nested for loop
public class Test2 {

	public static void main(String[] args) {

		// loop of i

		for (int i = 1; i <= 3; i++) {
			// loop of j
			for (int j = 1; j <= 3; j++) {
				System.out.println(i + " " + j);
			}
		}

        
	}
}

/*output:
1 1
1 2
1 3
2 1
2 2
2 3
3 1
3 2
3 3*/



output:
````````
*
* *
* * *
* * * *
* * * * *

example:
`````````

public class Test3 {

	public static void main(String[] args) {
		
		//define the outer for loop
		
		//outer for loop
		for(int i=1;i<=5;i++)
		{
			//inner for loop
			
			for(int j=1;j<=i;j++)
			{
				System.out.print("*");
			}
			
			System.out.println();
			
		}
	}
}

output:
```````
*
* *
* * * 
* * * *
* * * * * 






output:
````````
* * * * * *
* * * * *
* * * *
* * * 
* * 
*
   do this program as an assignment?
   
   











for each loop or enhanced for loop:
````````````````````````````````````

this enhanced for loop introduced from java 1.5 version onwards.

purpose:
``````````
it provides an alternative approach to traverse the array or collection in java.


it is mainly used to traverse the array or collection elements.

how the values will be stored inside an array variable?
  
  based on the index 
  
  array index starts from 0th location .
  
  
 int a[]={100,200,300};
 
  sysout(a[0]);
  sysout(a[1]);
  
  
note:
if the array length is 'n' 
maximum index is 'n-1'
because array index starts from 0 th location

  

syntax of foreach loop:
````````````````````````
it consists of datatype with the varaible followed by a colon (:) , then array or collection varaible.

  for(datatype variable:actualvaraible)
  {
  
     //body of for each loop
  }


int a[]={10,20,30,40,50};


  for(int b:a)
  {
    System.out.println(b);
  }

example:
`````````
class Test4
{
	
	public static void main(String[] args) {
		
		int a[]= {10,20,30,40,50};
		
		System.out.println(a[0]);
		System.out.println(a[1]);
		System.out.println(a[2]);
		System.out.println(a[3]);
		System.out.println(a[4]);
		
		System.out.println("=======using for loop displaying array elements============");
		
		for(int i=0;i<a.length;i++)
		{
			System.out.println(a[i]);
		}
		
		System.out.println("======using for each loop displaying array elements===");
		
		for(int b:a)
		{
			System.out.println(b);
		}
		
	}
}


//using for each loop calculate total of array elements
  int a[] ={1,2,3,4};
  
answer:
```````

public class Test5 {
	
	public static void main(String[] args) {
		
		int a[]= {1,2,3,4};
		int sum=0;
		for(int b:a)
		{
			sum=sum+b;
		}
		
		System.out.println("sum of array elements is : " + sum);
	}

}

 
 

java labelled for loop:
```````````````````````
we can have a name of each java for loop.

To do so, we used label before the for loop.

it is useful while using the nested for loop as we can break/continue
specific for loop.

syntax:

  labelname:
  
   for(intialization;condition;increment/decrement)
   {
     //code to be executed
    }
	
example:
`````````
//program on nested for loop
public class Test2 {

	public static void main(String[] args) {

		// using label for outer for loop
	aa:
		for (int i = 1; i <= 3; i++) {
			// using label for inner forloop of j
			
	bb:
			for (int j = 1; j <= 3; j++) {
				
				if(i==2&&j==2) {
					break aa;
				}
				System.out.println(i + " " +j);
			}
		}

	}
}

/*output:
1 1
1 2
1 3
2 1
*/



  

java while loop:
`````````````````
the java while loop is used to iterate a part of the program 
repeatedly until the specified condition is true.

as soon as the condition becomes false, the loop automatically stops.

the while loop is considered as a repeating if statement. 
if the number of iternation is not fixed, it is recommended to use the  while loop.


syntax:
```````    
   //intialize the value;
    while(condition)
	{
	  //code to be executed;
	  increment/decrement ;
	}

write one java program displaying 1 to 10 numbers using while loop?

example:
````````

public class Test6 {
	
	public static void main(String[] args) {
		
		//initialization 
		int i=1;
		//while loop
		
		while(i<=10)
		{
			System.out.println(i);
			i++;
		}
	}

}

do this program to display the 1 to 10 numbers in reverse order?


public class Test6 {
	
	public static void main(String[] args) {
		
		//initialization 
		int i=10;
		//while loop
		
		while(i>=1)
		{
			System.out.println(i);
			i--;
		}
	}

}


do while loop:
``````````````
do while loop is used to iterate a part of the program repeatedly,until the specified condition is true.

if the number of iteration is not fixed and you must have to execute
the loop at least once, it is recommended to use a do-while loop.

do while loop is called an exit control loop.

java do while loop is executed at least once because condition is 
checked after loop body.


syntax:
```````
  do{
  
    //code to be executed/loop body
	//update staetment
  
  } while(condition);
  
  
example:
````````

public class Test7 {
	
	public static void main(String[] args) {
		
		int i=1;
		do {
			System.out.println(i);
			i++;
			
		} while (i>=10);
		
	}

}

for loop v/s while loop v/s do-while loop:
``````````````````````````````````````````

 if the no.of iteration is  fixed, then it is recommended to use 
  for loop 
  
 if the no.of iteration is not fixed, then it is recommended to use
 while loop 
 
  if the no.of iteration is not fixed and you must execute the statement atleast once then we should use do while loop.
  
  
jump statements:
````````````````
Jump statements are one of the types of control statements in Java that directs the flow of execution in a program.


 break 
 continue
 
break statement:
````````````````
it is encountered inside a loop, 
the loop is immediately terminated and the program control resumes at the next statement following the loop.


break statement is used to break loop or switch statement.


it breaks the current flow of the program at specified condition.

in case of inner loop, it breaks only inner loop.


we can use java break statement in all types of loops such as

 -for loop,
 -while loop 
 -do while loop
 
 syntax:
 
      jump-statement;
	  break;
	  
	  
example:
````````

public class Test8 {
	
	public static void main(String[] args) {
		
		
		//using for loop
		for(int i=1;i<=10;i++)
		{
			if(i==5) {
				//breaking the loop
				break;
			}
			System.out.println(i);
		}
		
	
	}

}


 break statement with inner loop:
 
 it breaks inner loop only if you use break statement inside 
 the inner loop.
 
 
example:
`````````

public class Test8 {
	
	public static void main(String[] args) {
		
		
		//using for loop
		for(int i=1;i<=3;i++)
		{
			//inner loop
			for(int j=1;j<=3;j++)
			{
				if(i==2&&j==2)
				{
					break;
				}
				System.out.println(i + " " +j);
			}
			
		}
		
	
	}

}



3 assignments:

use break statement inside labelled for loop?

use break statement inside while loop?

use break statement inside do-while loop?


continue statement:
````````````````````
it is used in loop control structure when you need to jump 
to the next iteration of the loop immediately.

it can be used with all types of loops such as for,while and dowhile 



purpose: it is used to continue the loop.

note:

it continues the current flow of the program and skips the remaining 
code at the specified condition .


   for(int i=1;i<=10;i++)
   { 
      if(i==5){
	  continue;
	  }
	  sysout(i)
   }
1
2
3
4
6
7
8
9
10

in case of an inner loop, it continues the inner loop only.


syntax:

     jump-statement;
	 continue;
	 
example:
````````
`
public class Test8 {
	
	public static void main(String[] args) {
		
		
		//using for loop
		for(int i=1;i<=10;i++)
		{
			if(i==5)
			{
				continue;
			}
			System.out.println(i);
			
		}
		
	
	}

}

example of continue statement with inner for loop:
`````````````````````````````````````````````````````

public class Test8 {
	
	public static void main(String[] args) {
		
		
		//using for loop
		for(int i=1;i<=3;i++)
		{
			//inner loop
			for(int j=1;j<=3;j++)
			{
				if(i==2&&j==2) {
					continue;
				}
				System.out.println(i + " " + j);
			}
			
		}
		
	
	}

}

assignment:
```````````
use continue statement in labelled for loop?
use continue statement in while loop?
use continue staetment in do while loop?  
  
  
  
  
  
  
  
  
  
  
